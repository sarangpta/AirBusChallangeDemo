{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t = window.ShadowRoot && (void 0 === window.ShadyCSS || window.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype,\n      e = Symbol(),\n      n = new Map();\n\nclass s {\n  constructor(t, n) {\n    if (this._$cssResult$ = !0, n !== e) throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n    this.cssText = t;\n  }\n\n  get styleSheet() {\n    let e = n.get(this.cssText);\n    return t && void 0 === e && (n.set(this.cssText, e = new CSSStyleSheet()), e.replaceSync(this.cssText)), e;\n  }\n\n  toString() {\n    return this.cssText;\n  }\n\n}\n\nconst o = t => new s(\"string\" == typeof t ? t : t + \"\", e),\n      r = (t, ...n) => {\n  const o = 1 === t.length ? t[0] : n.reduce((e, n, s) => e + (t => {\n    if (!0 === t._$cssResult$) return t.cssText;\n    if (\"number\" == typeof t) return t;\n    throw Error(\"Value passed to 'css' function must be a 'css' function result: \" + t + \". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\");\n  })(n) + t[s + 1], t[0]);\n  return new s(o, e);\n},\n      i = (e, n) => {\n  t ? e.adoptedStyleSheets = n.map(t => t instanceof CSSStyleSheet ? t : t.styleSheet) : n.forEach(t => {\n    const n = document.createElement(\"style\"),\n          s = window.litNonce;\n    void 0 !== s && n.setAttribute(\"nonce\", s), n.textContent = t.cssText, e.appendChild(n);\n  });\n},\n      S = t ? t => t : t => t instanceof CSSStyleSheet ? (t => {\n  let e = \"\";\n\n  for (const n of t.cssRules) e += n.cssText;\n\n  return o(e);\n})(t) : t;\n\nexport { s as CSSResult, i as adoptStyles, r as css, S as getCompatibleStyle, t as supportsAdoptingStyleSheets, o as unsafeCSS }; //# sourceMappingURL=css-tag.js.map","map":null,"metadata":{},"sourceType":"module"}